pub mod ll {
    /* automatically generated by rust-bindgen */

    use libc::*;
    use sdl2::render::ll::SDL_Renderer;
    use sdl2::surface::ll::SDL_Surface;
    extern "C" {
        pub fn pixelColor(renderer: *mut SDL_Renderer, x: int16_t, y: int16_t,
                          color: uint32_t) -> c_int;
        pub fn pixelRGBA(renderer: *mut SDL_Renderer, x: int16_t, y: int16_t,
                         r: uint8_t, g: uint8_t, b: uint8_t, a: uint8_t) -> c_int;
        pub fn hlineColor(renderer: *mut SDL_Renderer, x1: int16_t, x2: int16_t,
                          y: int16_t, color: uint32_t) -> c_int;
        pub fn hlineRGBA(renderer: *mut SDL_Renderer, x1: int16_t, x2: int16_t,
                         y: int16_t, r: uint8_t, g: uint8_t, b: uint8_t, a: uint8_t) ->
         c_int;
        pub fn vlineColor(renderer: *mut SDL_Renderer, x: int16_t, y1: int16_t,
                          y2: int16_t, color: uint32_t) -> c_int;
        pub fn vlineRGBA(renderer: *mut SDL_Renderer, x: int16_t, y1: int16_t,
                         y2: int16_t, r: uint8_t, g: uint8_t, b: uint8_t, a: uint8_t) ->
         c_int;
        pub fn rectangleColor(renderer: *mut SDL_Renderer, x1: int16_t, y1: int16_t,
                              x2: int16_t, y2: int16_t, color: uint32_t) -> c_int;
        pub fn rectangleRGBA(renderer: *mut SDL_Renderer, x1: int16_t, y1: int16_t,
                             x2: int16_t, y2: int16_t, r: uint8_t, g: uint8_t, b: uint8_t,
                             a: uint8_t) -> c_int;
        pub fn roundedRectangleColor(renderer: *mut SDL_Renderer, x1: int16_t,
                                     y1: int16_t, x2: int16_t, y2: int16_t,
                                     rad: int16_t, color: uint32_t) -> c_int;
        pub fn roundedRectangleRGBA(renderer: *mut SDL_Renderer, x1: int16_t,
                                    y1: int16_t, x2: int16_t, y2: int16_t,
                                    rad: int16_t, r: uint8_t, g: uint8_t, b: uint8_t,
                                    a: uint8_t) -> c_int;
        pub fn boxColor(renderer: *mut SDL_Renderer, x1: int16_t, y1: int16_t,
                        x2: int16_t, y2: int16_t, color: uint32_t) -> c_int;
        pub fn boxRGBA(renderer: *mut SDL_Renderer, x1: int16_t, y1: int16_t,
                       x2: int16_t, y2: int16_t, r: uint8_t, g: uint8_t, b: uint8_t,
                       a: uint8_t) -> c_int;
        pub fn roundedBoxColor(renderer: *mut SDL_Renderer, x1: int16_t,
                               y1: int16_t, x2: int16_t, y2: int16_t, rad: int16_t,
                               color: uint32_t) -> c_int;
        pub fn roundedBoxRGBA(renderer: *mut SDL_Renderer, x1: int16_t, y1: int16_t,
                              x2: int16_t, y2: int16_t, rad: int16_t, r: uint8_t,
                              g: uint8_t, b: uint8_t, a: uint8_t) -> c_int;
        pub fn lineColor(renderer: *mut SDL_Renderer, x1: int16_t, y1: int16_t,
                         x2: int16_t, y2: int16_t, color: uint32_t) -> c_int;
        pub fn lineRGBA(renderer: *mut SDL_Renderer, x1: int16_t, y1: int16_t,
                        x2: int16_t, y2: int16_t, r: uint8_t, g: uint8_t, b: uint8_t,
                        a: uint8_t) -> c_int;
        pub fn aalineColor(renderer: *mut SDL_Renderer, x1: int16_t, y1: int16_t,
                           x2: int16_t, y2: int16_t, color: uint32_t) -> c_int;
        pub fn aalineRGBA(renderer: *mut SDL_Renderer, x1: int16_t, y1: int16_t,
                          x2: int16_t, y2: int16_t, r: uint8_t, g: uint8_t, b: uint8_t,
                          a: uint8_t) -> c_int;
        pub fn thickLineColor(renderer: *mut SDL_Renderer, x1: int16_t, y1: int16_t,
                              x2: int16_t, y2: int16_t, width: uint8_t, color: uint32_t)
         -> c_int;
        pub fn thickLineRGBA(renderer: *mut SDL_Renderer, x1: int16_t, y1: int16_t,
                             x2: int16_t, y2: int16_t, width: uint8_t, r: uint8_t,
                             g: uint8_t, b: uint8_t, a: uint8_t) -> c_int;
        pub fn circleColor(renderer: *mut SDL_Renderer, x: int16_t, y: int16_t,
                           rad: int16_t, color: uint32_t) -> c_int;
        pub fn circleRGBA(renderer: *mut SDL_Renderer, x: int16_t, y: int16_t,
                          rad: int16_t, r: uint8_t, g: uint8_t, b: uint8_t, a: uint8_t) ->
         c_int;
        pub fn arcColor(renderer: *mut SDL_Renderer, x: int16_t, y: int16_t,
                        rad: int16_t, start: int16_t, end: int16_t, color: uint32_t) ->
         c_int;
        pub fn arcRGBA(renderer: *mut SDL_Renderer, x: int16_t, y: int16_t,
                       rad: int16_t, start: int16_t, end: int16_t, r: uint8_t,
                       g: uint8_t, b: uint8_t, a: uint8_t) -> c_int;
        pub fn aacircleColor(renderer: *mut SDL_Renderer, x: int16_t, y: int16_t,
                             rad: int16_t, color: uint32_t) -> c_int;
        pub fn aacircleRGBA(renderer: *mut SDL_Renderer, x: int16_t, y: int16_t,
                            rad: int16_t, r: uint8_t, g: uint8_t, b: uint8_t, a: uint8_t)
         -> c_int;
        pub fn filledCircleColor(renderer: *mut SDL_Renderer, x: int16_t,
                                 y: int16_t, r: int16_t, color: uint32_t) -> c_int;
        pub fn filledCircleRGBA(renderer: *mut SDL_Renderer, x: int16_t, y: int16_t,
                                rad: int16_t, r: uint8_t, g: uint8_t, b: uint8_t,
                                a: uint8_t) -> c_int;
        pub fn ellipseColor(renderer: *mut SDL_Renderer, x: int16_t, y: int16_t,
                            rx: int16_t, ry: int16_t, color: uint32_t) -> c_int;
        pub fn ellipseRGBA(renderer: *mut SDL_Renderer, x: int16_t, y: int16_t,
                           rx: int16_t, ry: int16_t, r: uint8_t, g: uint8_t, b: uint8_t,
                           a: uint8_t) -> c_int;
        pub fn aaellipseColor(renderer: *mut SDL_Renderer, x: int16_t, y: int16_t,
                              rx: int16_t, ry: int16_t, color: uint32_t) -> c_int;
        pub fn aaellipseRGBA(renderer: *mut SDL_Renderer, x: int16_t, y: int16_t,
                             rx: int16_t, ry: int16_t, r: uint8_t, g: uint8_t, b: uint8_t,
                             a: uint8_t) -> c_int;
        pub fn filledEllipseColor(renderer: *mut SDL_Renderer, x: int16_t,
                                  y: int16_t, rx: int16_t, ry: int16_t,
                                  color: uint32_t) -> c_int;
        pub fn filledEllipseRGBA(renderer: *mut SDL_Renderer, x: int16_t,
                                 y: int16_t, rx: int16_t, ry: int16_t, r: uint8_t,
                                 g: uint8_t, b: uint8_t, a: uint8_t) -> c_int;
        pub fn pieColor(renderer: *mut SDL_Renderer, x: int16_t, y: int16_t,
                        rad: int16_t, start: int16_t, end: int16_t, color: uint32_t) ->
         c_int;
        pub fn pieRGBA(renderer: *mut SDL_Renderer, x: int16_t, y: int16_t,
                       rad: int16_t, start: int16_t, end: int16_t, r: uint8_t,
                       g: uint8_t, b: uint8_t, a: uint8_t) -> c_int;
        pub fn filledPieColor(renderer: *mut SDL_Renderer, x: int16_t, y: int16_t,
                              rad: int16_t, start: int16_t, end: int16_t,
                              color: uint32_t) -> c_int;
        pub fn filledPieRGBA(renderer: *mut SDL_Renderer, x: int16_t, y: int16_t,
                             rad: int16_t, start: int16_t, end: int16_t, r: uint8_t,
                             g: uint8_t, b: uint8_t, a: uint8_t) -> c_int;
        pub fn trigonColor(renderer: *mut SDL_Renderer, x1: int16_t, y1: int16_t,
                           x2: int16_t, y2: int16_t, x3: int16_t, y3: int16_t,
                           color: uint32_t) -> c_int;
        pub fn trigonRGBA(renderer: *mut SDL_Renderer, x1: int16_t, y1: int16_t,
                          x2: int16_t, y2: int16_t, x3: int16_t, y3: int16_t,
                          r: uint8_t, g: uint8_t, b: uint8_t, a: uint8_t) -> c_int;
        pub fn aatrigonColor(renderer: *mut SDL_Renderer, x1: int16_t, y1: int16_t,
                             x2: int16_t, y2: int16_t, x3: int16_t, y3: int16_t,
                             color: uint32_t) -> c_int;
        pub fn aatrigonRGBA(renderer: *mut SDL_Renderer, x1: int16_t, y1: int16_t,
                            x2: int16_t, y2: int16_t, x3: int16_t, y3: int16_t,
                            r: uint8_t, g: uint8_t, b: uint8_t, a: uint8_t) -> c_int;
        pub fn filledTrigonColor(renderer: *mut SDL_Renderer, x1: int16_t,
                                 y1: int16_t, x2: int16_t, y2: int16_t, x3: int16_t,
                                 y3: int16_t, color: uint32_t) -> c_int;
        pub fn filledTrigonRGBA(renderer: *mut SDL_Renderer, x1: int16_t,
                                y1: int16_t, x2: int16_t, y2: int16_t, x3: int16_t,
                                y3: int16_t, r: uint8_t, g: uint8_t, b: uint8_t,
                                a: uint8_t) -> c_int;
        pub fn polygonColor(renderer: *mut SDL_Renderer, vx: *int16_t, vy: *int16_t,
                            n: c_int, color: uint32_t) -> c_int;
        pub fn polygonRGBA(renderer: *mut SDL_Renderer, vx: *int16_t, vy: *int16_t,
                           n: c_int, r: uint8_t, g: uint8_t, b: uint8_t, a: uint8_t) ->
         c_int;
        pub fn aapolygonColor(renderer: *mut SDL_Renderer, vx: *int16_t,
                              vy: *int16_t, n: c_int, color: uint32_t) -> c_int;
        pub fn aapolygonRGBA(renderer: *mut SDL_Renderer, vx: *int16_t,
                             vy: *int16_t, n: c_int, r: uint8_t, g: uint8_t, b: uint8_t,
                             a: uint8_t) -> c_int;
        pub fn filledPolygonColor(renderer: *mut SDL_Renderer, vx: *int16_t,
                                  vy: *int16_t, n: c_int, color: uint32_t) -> c_int;
        pub fn filledPolygonRGBA(renderer: *mut SDL_Renderer, vx: *int16_t,
                                 vy: *int16_t, n: c_int, r: uint8_t, g: uint8_t,
                                 b: uint8_t, a: uint8_t) -> c_int;
        pub fn texturedPolygon(renderer: *mut SDL_Renderer, vx: *int16_t,
                               vy: *int16_t, n: c_int, texture: *mut SDL_Surface,
                               texture_dx: c_int, texture_dy: c_int) -> c_int;
        pub fn bezierColor(renderer: *mut SDL_Renderer, vx: *int16_t, vy: *int16_t,
                           n: c_int, s: c_int, color: uint32_t) -> c_int;
        pub fn bezierRGBA(renderer: *mut SDL_Renderer, vx: *int16_t, vy: *int16_t,
                          n: c_int, s: c_int, r: uint8_t, g: uint8_t, b: uint8_t,
                          a: uint8_t) -> c_int;
        pub fn gfxPrimitivesSetFont(fontdata: *c_void, cw: uint32_t, ch: uint32_t);
        pub fn gfxPrimitivesSetFontRotation(rotation: uint32_t);
        pub fn characterColor(renderer: *mut SDL_Renderer, x: int16_t, y: int16_t,
                              c: c_schar, color: uint32_t) -> c_int;
        pub fn characterRGBA(renderer: *mut SDL_Renderer, x: int16_t, y: int16_t,
                             c: c_schar, r: uint8_t, g: uint8_t, b: uint8_t, a: uint8_t)
         -> c_int;
        pub fn stringColor(renderer: *mut SDL_Renderer, x: int16_t, y: int16_t,
                           s: *c_schar, color: uint32_t) -> c_int;
        pub fn stringRGBA(renderer: *mut SDL_Renderer, x: int16_t, y: int16_t,
                          s: *c_schar, r: uint8_t, g: uint8_t, b: uint8_t, a: uint8_t) ->
         c_int;
    }
}
